

// Технология connection pooling позволяет уменьшить затраты на открытие и закрытие соединения
string conStr = @"
     Data Source=.\SQLEXPRESS;
	 Initial Catalog=ShopDB; 
	 Integrated Security=true; 
	 Pooling = false"; // включение или отключение пула для этого подключения

// создание конструктора строк подключения 
SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(); 

#if SetProperty

	connectionStringBuilder.DataSource = @".\SQLEXPRESS";       // используйте конструктор строк подключения для 
	connectionStringBuilder.InitialCatalog = "ShopDB";          // предотвращения изменения пользователем структуры строки подключения
	connectionStringBuilder.UserID = userNameTextBox.Text;      
	connectionStringBuilder.Password = passwordTextBox.Text;    
#else 
	connectionStringBuilder["Data Source"] = @".\SQLEXPRESS";   // используйте конструктор строк подключения для 
	connectionStringBuilder["Initial Catalog"] = "ShopDB";      // предотвращения изменения пользователем структуры строки подключения
	connectionStringBuilder["User ID"] = userNameTextBox.Text;
	connectionStringBuilder["Password"] = passwordTextBox.Text;
#endif
using (SqlConnection connection = new SqlConnection(connectionStringBuilder.ConnectionString)) {
	try
	{
		connection.Open();
		MessageBox.Show("Connection opened to " + connection.Database);

	}
	catch (Exception exception)
	{
		MessageBox.Show(exception.Message);
	}

}


// Шифрование секции строк подключения в конфигурационном файле
 static void Main(string[] args)
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
            config.ConnectionStrings.ConnectionStrings.Add(new ConnectionStringSettings("COnnectionStr1", "SomeConnectionString"));
            config.Save();

            ConnectionStringsSection section = config.GetSection("connectionStrings") as ConnectionStringsSection;

            if (section.SectionInformation.IsProtected)
            {
                // Расшифровать секцию
                section.SectionInformation.UnprotectSection();
            }
            else
            {
                // Зашифровать секцию.
                section.SectionInformation.ProtectSection(
                    "DataProtectionConfigurationProvider");
            }

            // Сохранить файл конфигурации.
            config.Save();

            // Проверка шифрования
            Console.WriteLine("Protected={0}", section.SectionInformation.IsProtected);

            Console.WriteLine(ConfigurationManager.ConnectionStrings["COnnectionStr1"].ConnectionString);
        }

// выполнение пакета операторов SQL с помощъю одного объекта SqlCommand

namespace CBS.ADO_NET.PackageCommands
{
    class Program
    {

        public static void WriteReaderData(DbDataReader reader)
        {
            while (reader.Read())                       // вывод данных возвращаемых вторым запросом 
            {
                for (int i = 0; i < reader.FieldCount; i++)
                    Console.WriteLine(reader.GetName(i)+": "+reader[i]);
                Console.WriteLine(new string('_', 20));
            }
        }

        static void Main(string[] args)
        {
            string conStr = @"Data Source=.\SQLEXPRESS; Initial Catalog=ShopDB; Integrated Security=True;"; // создание строки подключения

            SqlConnection connection = new SqlConnection(conStr); // создание подключения
            connection.Open();

            SqlCommand cmd = new SqlCommand("SELECT * FROM Customers WHERE CustomerNo = 1; SELECT * FROM Employees WHERE EmployeeID = 1;", connection);  // создание пакета запросов 

            SqlDataReader reader = cmd.ExecuteReader();

            Console.WriteLine("press any key to see data from Customers");
            Console.ReadKey();

            WriteReaderData(reader);  // вывод на экран данных

            Console.WriteLine("press any key to see data from Employees");
            Console.ReadKey();

            reader.NextResult();      // переход к следующему запросу     

            WriteReaderData(reader);  // вывод данных на экран

            connection.Close();
            reader.Close();           // не забывайте закрывать объект reader
            Console.ReadKey();
        }
    }
}
