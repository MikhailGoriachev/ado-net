ADO.NET - технология доступа к источникам данных

ADO   - ActiveX Data Object, 
        Набор объектов для доступа к данным из приложений на любых
	    языках программирования MS (по факту - на всех широкораспространенных языках)
.NET  - построено на технологии .NET Framework

Что изучается
► доступ к БД - собственно ADO.NET (в узком смысле)
► LINQ - язык интегрированных запросов к данным, часть языка С#, 
         подобен SQL, LINQ to SQL
► Entity Framework - концепция доступа к данным - набор классов для
         доступа к данным (БД - база данных - как коллекция классов)

Обзор технологий доступа к БД

1. API БД 
   Наборы функций, специфичны для каждой системы управленя базами данных (СУБД)
   Пример: dBase, FoxPro, Clipper, Paradox, DB/2, ...
   + оптимальный доступ к данным
   - нет стандарта
   - долгое обучение

2. ODBC - Open Database Connectivity
   Стандартный API уровня приложений, работает с теми СУБД, для которых реализован
   драйвер доступа к данным (драйвер ODBC)

   Драйвер ODBC - преобразование вызвов ODBC в вызова API конкретного источника данных
   В ODBC участвует MS => доступны все источники данных MS

   + стандартизация
   + универсальность API ODBC (любые источники данных)
   - потеря производительности, т.к. появился посредник доступа к данным (драйвер)
   - процедурная реализация

3. DAO - Data Access Object объектная технология доступа к данным  
   на основе процессора баз данных Microsoft Jet
   Microsoft Jet - разработка для MS Access, максимально эффективен только с Access

   + объектная технология
   - доступ к БД, отличным от Access - через ODBC
   - MS не обновляет MS Jet
   - доступ только к реляционным БД

4. OLE DB Object Linking and Embedding Database
   связь и внедрение объектов, в т.ч. баз данных

   OLE - технология MS для взаимодействия объектов уровня приложений в процессе работы
   OLE - набор COM-интерфейсов, для обращения к функциям приложения

   COM - Component Object Model - dll и ocx-файлы, реализующие интерфейсы, наборы 
         функций и классов (со-классов)

   COM-библиотека - tlb-файл, набор объектов COM, описание COM-объектов и реализация 
         COM-объектов. 
		 
   COM-технологии работают с соглашениями о вызовах C, С++

   OLE DB - работа с источниками данных не через драйвер, а через провайдер данных

   Провайдер данных - набор COM-объектов, реализующих интерфейсы доступа к источникам
   данных
   
   Приложение <---> Провайдер данных <----> Источник данных 

   Провайдер данных
   ☼ файловое хранилище
   ☼ локальная папка/файл
   ☼ электронная почта
   ☼ СУБД
   ☼ ...
   
5. ADO - оболочка для OLE DB
   Набор объектов для доступа к источникам данных (высокоуровневые объекты)
   ActiveX доступны во всех системах программирования под Windows      
   
   ActiveX - оболочка для COM-объекта

   Приложение <---> ADO <----> Провайдер данных <----> Источник данных 

6. ADO.NET
   Имеет доступ ко всем предыдущим технологиям
   ‼ .NET исполняемые модули могут вызвываться через Интернет-соединение ‼

Пространства имен ADO.NET для доступа к источникам данных

System.Data              - основное пространство имен
System.Data.Common       - общие средства, абстрактные классы

System.Data.OleDb        - доступ OLE DB

System.Data.Sql          - доступ к SQL
System.Data.SqlClient

System.Data.Oracle       - доступ к Oracle
System.Data.OracleClient

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 18/09/2016

Режимы работы с БД

► Присоединенный режим
► Отсоединенный/Автономный режим

Присоединенный режим
Клиент остается подключенным к серверу на все время работы.
+ минимальное время задержки
+ актуальные даныне в запросах 
- повышенная нагрузка на сервер (на каждое подключение тратится некоторый ресурс - время ЦП, объем ОП) 

Отсоединенный/Автономный режим
Клиент подключается к серверу только для выполения некоторых видов запросов, бОльшая часть
времени - оффлайн, доступ - к кэшированным данным сервера. Необходимы специальные методы
для реализации запросов к данным
+ минимальная нагрузка на сервер
- специальные ресурсы для кеширования
- специальные методы для изменения данных
- данные в кэше могуть быть не актуальными (не соответствовать серверной базе данных)

Работа в присоединенном режиме

1. Соединение с базой данных (БД)
2. Выполнение запросов - CRUD-операции (Create, Read, Update, Delete)
   - запросы модификации данных (insert, update, delete, create)
   - запросы выборки данных (select): возврат единственного значения, или коллекции
     значений (массив, список, ...). ‼ запросы могут иметь параметры ‼
   - организация транзакций
3. Завершение соединения с базой данных, рассоединение

Соединение с БД 
Реализуется объктом Connection - для разных БД свое наполнение объекта
MS SQL - класс объекта System.Data.SqlClient.SqlConnection
ODBC   -               System.Data.ODBC.OdbcConnection
...

System.Data.Common.DbConnection  - абстрактный класс соединения

System.Data.Common.DbConnection conn;

try {
    conn = new System.Data.SqlClient.SqlConnection(строкаСоединения);
	conn.Open();  // открытие соединения
	
	... Работа с базой данных ...
}  
catch (Exception ex) {
    ... обработка исключений ...
	аварийное завершение
}
finally {
    conn.Close();    // закрытие соединения
}

Строка соединения
Пример строки соединения с MS SQL
"Data Source=(localdb); Initial Catalog=Good_Store; Integrated Security=SSPI;"

DataSource      - имя сервера, local - локальный компьютер, ИмяКомпьютера\ИмяСервера (VLAD\SQLEXPRESS)
Initial Catalog - имя базы данных в выбранном сервере, например Good_Store, или Insurance 
Integrated Security - метод аутентификации (учетная запись системы или учетная запись базы данных)
Dsn             - имя источника данных для ODBC
Provider        - провайдер данных OLE DB
User            - имя пользователя для входа
Password        - пароль

Пример


ConnectionStringBuilder - класс для упрощения построения строки соединения

Пример



Выполнение запросов - выполнение команд (объект Command)
Общий предок:
System.Data.Common.DbCommand, требует реализации интерфейса IDbCommand

Классы
SqlClient.SqlCommand, OleDb.OleDbCommand, Odbc.OdbcCommand

Методы для выполнения запросов
☼ запросы модификации данных (insert, update, delete, create) - ExecuteNonQuery()
☼ запросы выборки данных (select): 
  ► возврат единственного значения - ExecuteScalar()
  ► возврат коллекции значений (массив, список, ...) - ExecuteReader()

Объект DataReader - для чтения данных, полученных в запросе ExecuteReader

Получить список серверов
SqlDataSourceEnumerator instance =  SqlDataSourceEnumerator.Instance;
DataTable table = instance.GetDataSources();

Параметры хранимых процедур / параметры запросов

Класс для передачи и получения параметров в/из хранимые процедуры или запросы
Объекты класса хранят - имена параметров, тип параметра, направление передачи
параметра
   ☼ входной параметр
   ☼ выходной парметр
   ☼ двунаправленный (входной/выходной)
   ☼ возвращемое значение (return)

Класс - SqlParameter для MS SQL

SqlParameter param = new SqlParameter();
param.ParameterName = "@from";              // имя параметра - по синтаксису T-SQL
param.SqlDbType = SqlDbType.Int;            // тип данных парметра - из типов T-SQL 
param.Direction = ParameterDirection.Input; // направление передачи данных
param.Value = 25;                           // значение параметра
cmd.Parameters.Add(param);
...

SqlDataReader reader;
using (reader = cmd.ExecuteReader()) {
    ...
}

Использование транзакций

Транзакции реализованы в классе SqlTransaction (для MS SQL)

Начало транзакции

SqlTransaction trans = conn.BeginTransaction();

‼ conn - объект класса SqlConnection

trans.Commit()                 -- принять изменения
trans.Rollback()               -- откатить изменения
trans.Save(имяТочкиСохранения) -- сохранить этап троанзакции в точке сохранения

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 09/10/2016
