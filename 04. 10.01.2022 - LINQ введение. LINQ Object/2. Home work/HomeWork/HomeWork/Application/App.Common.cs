using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using HomeWork.Controllers;     // контроллеры

using static HomeWork.Application.App.Utils;       // для использования утилит

/*
 * Разработайте, пожалуйста, консольное приложение C# для решения следующих задач (в 
 * объектном стиле – с созданием класса, объекта этого класса):
 * •	Задача 1. Для класса, представляющего товар (наименование, цена, количество,
 *      год выпуска) разработать расширяющий метод, возвращающий процент скидки в 
 *      зависимости от возраста товара – до 3х лет скидка не представляется, от 3х до 
 *      10 лет скидка 3%, свыше 10 лет – скидка 7%. Продемонстрировать работу метода 
 *      на коллекции из 12 товаров.
 * •	Задача 2. С использованием LINQ (создавайте 2 варианта запросов – в синтаксисе
 *      LINQ и в синтаксисе расширяющих методов) выполнить обработки для одномерного 
 *      массива из n вещественных элементов:
 *      o	Вычисление количества элементов массива, со значениями в диапазоне от A до B
 *      o	Вычисление количества элементов массива, равных 0
 *      o	Вычисление суммы элементов массива, расположенных после первого максимального
 *          элемента
 *      o	Вычисление суммы элементов массива, расположенных перед последним минимальным
 *          по модулю элементом
 * •	Задача 3. Для коллекции товаров из задачи 1 выполнить следующие LINQ-запросы 
 *      (создавайте 2 варианта запросов – в синтаксисе LINQ и в синтаксисе расширяющих 
 *      методов):
 *      o	товары с заданным диапазоном цен
 *      o	сумма товаров с заданным годом выпуска
 *      o	сумма товаров с заданным наименованием (суммируем произведение цены на 
 *          количество, наименование товара может быть задано частично, но без маски 
 *          типа %, _)
 *      o	наименование и год выпуска товаров с максимальным количеством
 *      o	все товары, для которых произведение цены на количество находится в заданном
 *          диапазоне
*/

namespace HomeWork.Application
{

    public partial class App
    {
        // контроллер обработки по заданию 2
        private Task2Controller _controllerTask2;

        public Task2Controller ControllerTask2
        {
            get => _controllerTask2;
            set => _controllerTask2 = value;
        }


        // контроллер обработки по заданию 3
        private Task3Controller _controllerTask3;

        public Task3Controller ControllerTask3
        {
            get => _controllerTask3; 
            set => _controllerTask3 = value; 
        }

        #region Конструкторы

        // конструктор по умолчанию
        public App() : this(new Task3Controller(), new Task2Controller()) { }


        // конструктор инициализирующий
        public App(Task3Controller controllerTask3, Task2Controller controllerTask2)
        {
            // установка значений
            _controllerTask2 = controllerTask2;
            _controllerTask3 = controllerTask3;
        } // App

        #endregion

    }
}
